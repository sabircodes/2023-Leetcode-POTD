class Solution {
public:

    void helpme(vector<vector<int>>& ajp, unordered_map<int, vector<int>>& adj, unordered_set<int>& vis, int node, vector<int>& ans) {
        vis.insert(node);
        ans.push_back(node);
        for (auto neigh : adj[node]) {
            if (vis.find(neigh) == vis.end()) {
                helpme(ajp, adj, vis, neigh, ans);
            }
        }
    }

    vector<int> restoreArray(vector<vector<int>>& ajp) {
        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
        
        unordered_map<int, vector<int>> adj;
        vector<int> ans;
        unordered_set<int> vis;

        for (vector<int>& i : ajp) {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }

        int start;
        for (auto i : adj) {
            if (i.second.size() == 1) {
                start = i.first;
                break;
            }
        }

        helpme(ajp, adj, vis, start, ans);
        return ans;
    }
};

class Graph {
public:
    
    vector<vector<pair<int,int>>>adj;
    Graph(int n, vector<vector<int>>& edges) {
        ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
        adj.resize(n);
        for(auto e: edges){
            addEdge(e);
        }
    }

    
    void addEdge(vector<int> edge) {
        int u  =  edge[0];
        int v  =  edge[1];
        int wt =  edge[2];
        adj[u].push_back({v,wt});
    }
    
    int shortestPath(int node1, int node2) {
        int minPath = -1;
        queue<int> q;
        vector<int> vis(adj.size(), INT_MAX);
        q.push(node1); vis[node1] = 0;
        while(q.size()){
            auto node = q.front(); q.pop();
            if(node == node2) minPath = vis[node];
            for(auto [n, c]: adj[node]){
                if(vis[n] < vis[node] + c) continue;
                q.push(n);
                vis[n] = vis[node] + c;
            }
        }
        return minPath;


        
    }
};

/**
 * Your Graph object will be instantiated and called as such:
 * Graph* obj = new Graph(n, edges);
 * obj->addEdge(edge);
 * int param_2 = obj->shortestPath(node1,node2);
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
// this function finds the sum of a particular root and its subtrees and store the count of the nodes
    int sumcount(TreeNode*root,int &count){
        if(!root)return 0;
        count++;
        int left = sumcount(root->left,count);
        int right = sumcount(root->right,count);
        return root->val+left+right;
    }
    // this will tell us wehter it meets all the condition 
    bool helpme(TreeNode*root){
        if(!root)return 0;
        int count = 0;
        int sum = sumcount(root,count);
        if(sum/count == root->val){
            return true;
        }
        return false;
        
    }

    int averageOfSubtree(TreeNode* root) {
        if(!root)return 0;
        int count = 0 ;
        // this will check on the roots 
        if(helpme(root)){
            count++;
        }
        // now we are done with roots now lets go for left and right sub trees
        count+=averageOfSubtree(root->left);
        count+=averageOfSubtree(root->right);
        return count;
        
    }
};

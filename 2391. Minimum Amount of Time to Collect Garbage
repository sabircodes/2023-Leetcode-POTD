class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        int time = 0;
        int n = garbage.size();
        for(auto i : garbage){
            time+=i.length();
        }
        int m = -1;
        int p = -1;
        int g = -1;

        for(int i = n-1 ; i>=0 ; i--){
            if(m==-1 && garbage[i].find("M") != string::npos){
                m=i;
            }
            if(p==-1 && garbage[i].find("P") != string::npos){
                p=i;
            }
            if(g == -1 && garbage[i].find("G") != string::npos){
                g=i;
            }

            if(m!=-1 && g!=-1 && p!=-1 ){
                break;
            }

        }

        if(m!=-1) time=accumulate(travel.begin(),travel.begin()+m,time);
        if(p!=-1) time=accumulate(travel.begin(),travel.begin()+p,time);
        if(g!=-1) time=accumulate(travel.begin(),travel.begin()+g,time);

        return time;





    }
};
